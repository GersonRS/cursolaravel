"use strict";angular.module("pusher-angular",[]).factory("$pusher",["$rootScope","$channel","$connection",function(n,e,t){function i(n){if(!(this instanceof i)){return new i(n)}this._assertValidClient(n);this.client=n;this.connection=t(n.connection,n);this.channels={}}i.prototype={subscribe:function(n){var t=this.client.channel(n);if(t===undefined){t=this.client.subscribe(n)}t=e(t,this);this.channels[n]=t;return t},unsubscribe:function(n){if(this.client.channel(n)){this.client.unsubscribe(n);if(this.channels[n]){delete this.channels[n]}}},bind:function(e,t){this.client.bind(e,function(e){t(e);n.$digest()})},bind_all:function(e){this.client.bind_all(function(t,i){e(t,i);n.$digest()})},unbind:function(n,e){this.client.unbind(n,e)},disconnect:function(){this.client.disconnect()},channel:function(n){return this.channels[n]},allChannels:function(){return this.channels},_assertValidClient:function(n){if(!angular.isObject(n)||!angular.isObject(n.connection)||typeof n.channel!=="function"){throw new Error("Invalid Pusher client object")}}};return i}]).factory("$channel",["$rootScope","$members",function(n,e){function t(n){if(n.indexOf("presence-")==-1&&n.indexOf("private-")==-1){throw new Error("Presence or private channel required")}}function i(n,t){if(!(this instanceof i)){return new i(n,t)}this._assertValidChannel(n);this.baseChannel=n;this.client=t;this.name=n.name;if(n.name.indexOf("presence")==-1){this.members=function(){throw new Error("Members object only exists for presence channels")}}else{this.members=e(n.members,n)}}i.prototype={bind:function(e,t,i){this.baseChannel.bind(e,function(e){t(e);n.$digest()},i)},unbind:function(n,e,t){this.baseChannel.unbind(n,e,t)},bind_all:function(e){this.baseChannel.bind_all(function(t,i){e(t,i);n.$digest()})},trigger:function(n,e){t(this.name);if(n.indexOf("client-")==-1){throw new Error("Event name requires 'client-' prefix")}return this.baseChannel.trigger(n,e)},_assertValidChannel:function(n){if(!angular.isObject(n)||typeof n.name!=="string"){throw new Error("Invalid Pusher channel object")}}};return i}]).factory("$members",["$rootScope",function(n){function e(t,i){if(!(this instanceof e)){return new e(t,i)}var s=this;this._assertValidMembers(t);this.baseMembers=t;this.baseChannel=i;this.me={};this.count=0;this.members={};i.bind("pusher:subscription_succeeded",function(e){s.me=e.me;s.count=e.count;s.members=e.members;n.$digest()});i.bind("pusher:member_added",function(e){s.count++;if(e.info){s.members[e.id.toString()]=e.info}else{s.members[e.id.toString()]=null}n.$digest()});i.bind("pusher:member_removed",function(e){s.count--;delete s.members[e.id.toString()];n.$digest()})}e.prototype={get:function(n){return this.baseMembers.get(n)},each:function(e){this.baseMembers.each(function(t){e(t);n.$digest()})},_assertValidMembers:function(n){if(!angular.isObject(n)||typeof n.me!=="object"){throw new Error("Invalid Pusher channel members object")}}};return e}]).factory("$connection",["$rootScope",function(n){function e(n,t){if(!(this instanceof e)){return new e(n,t)}this._assertValidConnection(n);this.baseConnection=n;this.baseClient=t}e.prototype={bind:function(e,t,i){this.baseConnection.bind(e,function(e){t(e);n.$digest()},i)},bind_all:function(e){this.baseConnection.bind_all(function(t,i){e(t,i);n.$digest()})},_assertValidConnection:function(n){if(!angular.isObject(n)){throw new Error("Invalid Pusher connection object")}}};return e}]);